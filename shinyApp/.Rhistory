library(rsconnect)
# rsconnect::configureApp("app", size="xlarge")
rsconnect::setAccountInfo(name='yanheupenn',
token='C31C823B0CB197134F1228D8E69507E4',
secret='2qlbFM/NQkJ2zDYcWUcG2xb87/0JosNXqG/OyNDn')
rsconnect::deployApp()
shiny::runApp()
runApp()
library(rsconnect)
# rsconnect::configureApp("app", size="xlarge")
rsconnect::setAccountInfo(name='yanheupenn',
token='C31C823B0CB197134F1228D8E69507E4',
secret='2qlbFM/NQkJ2zDYcWUcG2xb87/0JosNXqG/OyNDn')
rsconnect::deployApp()
library(rsconnect)
# rsconnect::configureApp("app", size="xlarge")
rsconnect::setAccountInfo(name='yanheupenn',
token='C31C823B0CB197134F1228D8E69507E4',
secret='2qlbFM/NQkJ2zDYcWUcG2xb87/0JosNXqG/OyNDn')
rsconnect::deployApp()
runApp()
library(rsconnect)
# rsconnect::configureApp("app", size="xlarge")
rsconnect::setAccountInfo(name='yanheupenn',
token='C31C823B0CB197134F1228D8E69507E4',
secret='2qlbFM/NQkJ2zDYcWUcG2xb87/0JosNXqG/OyNDn')
rsconnect::deployApp()
rsconnect::deployApp()
deployApp(account = "yanheupenn")
library(rsconnect)
# rsconnect::configureApp("app", size="xlarge")
rsconnect::setAccountInfo(name='yanheupenn',
token='C31C823B0CB197134F1228D8E69507E4',
secret='2qlbFM/NQkJ2zDYcWUcG2xb87/0JosNXqG/OyNDn')
deployApp(account = "yanheupenn", appName = 'MA_plans')
runApp('G:/My Drive/RShiny/Final project')
runApp('G:/My Drive/RShiny/Week 4/Synchronous session/presidents app with graph')
runApp('G:/My Drive/RShiny/Week 4/Regression and Shiny app')
runApp('E:/Repositories/MA-auto-enrollment/2_Code/descriptive_analysis/shinyApp')
runApp()
runApp()
runApp()
runApp()
load('ma.rda')
View(ma)
load('poptot.rda')
View(poptot)
a=c(1,2)
a[0]
a(0)
a[1]
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
a=c(1,2)
b=c('all')
a+b
append(a,b)
runApp()
sub("rating: ", "", df_ma[,'rating.range'])
runApp()
runApp()
a = c('1','2')
lapply(a, paste(i, "completed."))
lapply(a, function(i) paste("Here this is", i, "completed."))
b=lapply(a, function(i) paste("Here this is", i, "completed."))
b
b=apply(a, function(i) paste("Here this is", i, "completed."))
b
list(b)
a = c('1','2')
paste(a, "Here this is", sep='_')
b=paste(a, "Here this is", sep='_')
b
a
a[1]
a[[1]]
lapply(a, function(x) paste(x, "Here this is", sep='_'))
lapply(a, function(x) paste(x, "Here this is", sep='_')[[1]])
lapply(a, function(x) paste(x[[1]], "Here this is", sep='_'))
apply(a, function(x) paste(x[[1]], "Here this is", sep='_'))
apply(a, FUN(x) paste(x[[1]], "Here this is", sep='_'))
a[a==1]
a = c(1,2,3)
a[a==1]
a[a==2]
a[a==3]
a=c('a', 'b', 'c')
a[a!='a']
a = c(1,2,3)
a[a>1] = paste('test',a,sep = '-')
a
length(a)
runApp()
length(a)
seq(1,3)
runApp()
runApp()
runApp('G:/My Drive/RShiny/Week 4/Regression and Shiny app')
runApp('G:/My Drive/RShiny/Final project')
load('ma.rda')
load('poptot.rda')
df_ma <- data.frame()
df_noplan <- data.frame()
for (max_rating in c(2, 2.5, 3, 3.5, 4, 4.5, 5)) {
if (max_rating >= rating) {
df = ma[ma$Overall.Star.Rating>=rating & ma$Overall.Star.Rating<=max_rating,]
df <- df %>%
group_by(FIPSCode) %>%
mutate(Premium.mean = mean(PlanPremium),
Premium.median = median(PlanPremium),
Premium.25pct = quantile(PlanPremium, 0.25))
if (premium=="0") {
df = df[df$PlanPremium==0, ]
} else if (premium=="Below Mean") {
df = df[df$PlanPremium<=df$Premium.mean,]
} else if (premium=="Below Median") {
df = df[df$PlanPremium<=df$Premium.median,]
} else if (premium=="Below 25percentile") {
df = df[df$PlanPremium<=df$Premium.25pct,]
}
# calculate the MOOP percentiles to for filtering
df <- df %>%
group_by(FIPSCode) %>%
mutate(MOOP.min = min(InNetworkMOOP),
MOOP.mean = mean(InNetworkMOOP),
MOOP.median = median(InNetworkMOOP),
MOOP.25pct = quantile(InNetworkMOOP, 0.25))
if (MOOP=="Minimum") {
df = df[df$InNetworkMOOP==df$MOOP.min,]
} else if (MOOP=="Below Mean") {
df = df[df$InNetworkMOOP<=df$MOOP.mean,]
} else if (MOOP=="Below Median") {
df = df[df$InNetworkMOOP<=df$MOOP.median,]
} else if (MOOP=="Below 25percentile") {
df = df[df$InNetworkMOOP<=df$MOOP.25pct,]
}
df <- df %>%
right_join(poptot)
agg <- df %>%
group_by(County.Size, Plan.Type) %>%
summarise(EligibleMA = n()) # this would gives us the number of eligible MA plans
agg[is.na(agg$Plan.Type), 'Plan.Type'] = 'No Plans'
# data of counties that do not have eligible MA plans
# 2) Number of counties that with or without eligible MA plans
df['CountyN'] = 1
df['County.Type'] = "With.Plan"
df[is.na(df$Plan.Type), 'County.Type'] = 'Without.Plan'
cntyN <- df %>%
select(c(County.Size, State, County, CountyN, County.Type)) %>%
distinct() %>%
group_by(County.Size, County.Type) %>%
summarise(No.Counties = sum(CountyN))
}
agg['max.rating'] <- max_rating
cntyN['max.rating'] <- max_rating
if (max_rating==rating) {
agg['rating.range'] <- paste0('rating: ', rating)
cntyN['rating.range'] <- paste0('rating: ',rating)
} else{
agg['rating.range'] <- paste0('rating: ',rating,'-', max_rating)
cntyN['rating.range'] <- paste0('rating: ',rating,'-', max_rating)
}
df_ma <- rbind(df_ma, agg)
df_cnty <- rbind(df_cnty, cntyN)
}
type = c('HMO', 'Local PPO', 'MSA', 'PFFS', 'Regional PPO')
rating = 2
premium ='0' #'No Restriction' # c("0", "Below Mean", "Below Median")
MOOP = "Minimum" # c("No Restriction", "Below Mean", "Below Median")
df_ma <- data.frame()
df_noplan <- data.frame()
for (max_rating in c(2, 2.5, 3, 3.5, 4, 4.5, 5)) {
if (max_rating >= rating) {
df = ma[ma$Overall.Star.Rating>=rating & ma$Overall.Star.Rating<=max_rating,]
df <- df %>%
group_by(FIPSCode) %>%
mutate(Premium.mean = mean(PlanPremium),
Premium.median = median(PlanPremium),
Premium.25pct = quantile(PlanPremium, 0.25))
if (premium=="0") {
df = df[df$PlanPremium==0, ]
} else if (premium=="Below Mean") {
df = df[df$PlanPremium<=df$Premium.mean,]
} else if (premium=="Below Median") {
df = df[df$PlanPremium<=df$Premium.median,]
} else if (premium=="Below 25percentile") {
df = df[df$PlanPremium<=df$Premium.25pct,]
}
# calculate the MOOP percentiles to for filtering
df <- df %>%
group_by(FIPSCode) %>%
mutate(MOOP.min = min(InNetworkMOOP),
MOOP.mean = mean(InNetworkMOOP),
MOOP.median = median(InNetworkMOOP),
MOOP.25pct = quantile(InNetworkMOOP, 0.25))
if (MOOP=="Minimum") {
df = df[df$InNetworkMOOP==df$MOOP.min,]
} else if (MOOP=="Below Mean") {
df = df[df$InNetworkMOOP<=df$MOOP.mean,]
} else if (MOOP=="Below Median") {
df = df[df$InNetworkMOOP<=df$MOOP.median,]
} else if (MOOP=="Below 25percentile") {
df = df[df$InNetworkMOOP<=df$MOOP.25pct,]
}
df <- df %>%
right_join(poptot)
agg <- df %>%
group_by(County.Size, Plan.Type) %>%
summarise(EligibleMA = n()) # this would gives us the number of eligible MA plans
agg[is.na(agg$Plan.Type), 'Plan.Type'] = 'No Plans'
# data of counties that do not have eligible MA plans
# 2) Number of counties that with or without eligible MA plans
df['CountyN'] = 1
df['County.Type'] = "With.Plan"
df[is.na(df$Plan.Type), 'County.Type'] = 'Without.Plan'
cntyN <- df %>%
select(c(County.Size, State, County, CountyN, County.Type)) %>%
distinct() %>%
group_by(County.Size, County.Type) %>%
summarise(No.Counties = sum(CountyN))
}
agg['max.rating'] <- max_rating
cntyN['max.rating'] <- max_rating
if (max_rating==rating) {
agg['rating.range'] <- paste0('rating: ', rating)
cntyN['rating.range'] <- paste0('rating: ',rating)
} else{
agg['rating.range'] <- paste0('rating: ',rating,'-', max_rating)
cntyN['rating.range'] <- paste0('rating: ',rating,'-', max_rating)
}
df_ma <- rbind(df_ma, agg)
df_cnty <- rbind(df_cnty, cntyN)
}
shiny::runApp()
runApp()
load("E:/Repositories/MA-auto-enrollment/2_Code/descriptive_analysis/shinyApp/poptot.rda")
View(poptot)
colnames(poptot)
runApp()
sum(poptot$TotalPop)
runApp()
View(poptot)
runApp()
runApp('G:/My Drive/RShiny/Week 4/Regression and Shiny app')
runApp('G:/My Drive/RShiny/Final project')
runApp('E:/Repositories/MA-auto-enrollment/2_Code/descriptive_analysis/shinyApp')
shiny::runApp()
library(leaflet)
library(rgdal)
county_shape <- readOGR("E:/Repositories/MA-auto-enrollment/2_Code/descriptive_analysis/shinyApp/cb_2019_us_county_20m")
counties <- county_shape
load('poptot.rda')
county_shape$FIPSCode = as.numeric(county_shape$GEOID)
counties <- county_shape
counties@data <- data.frame(counties@data, poptot[match(counties@data$GEOID, poptot$FIPCODE),])
runApp()
county_shape <- readOGR("E:/Repositories/MA-auto-enrollment/2_Code/descriptive_analysis/shinyApp/cb_2019_us_county_20m")
county_shape$FIPSCode = as.numeric(county_shape$GEOID)
counties@data <- data.frame(counties@data, poptot[match(counties@data$GEOID, poptot$FIPCODE),])
a=counties@data
View(a)
shiny::runApp()
load('poptot.rda')
county_shape <- readOGR("E:/Repositories/MA-auto-enrollment/2_Code/descriptive_analysis/shinyApp/cb_2019_us_county_20m")
county_shape$FIPSCode = as.numeric(county_shape$GEOID)
a=county_shape@data
View(a)
counties <- county_shape
b=counties@data
View(b)
test = data.frame(counties@data, poptot[match(counties@data$GEOID, poptot$FIPCODE),])
View(test)
test = data.frame(counties@data, poptot[match(counties@data$FIPSCode, poptot$FIPCode),])
View(test)
View(poptot)
test=data.frame(counties@data, poptot[match(counties@data$FIPSCode, poptot$FIPSCode),])
View(test)
runApp()
runApp()
library(rsconnect)
# rsconnect::configureApp("app", size="xlarge")
rsconnect::setAccountInfo(name='yanheupenn',
token='C31C823B0CB197134F1228D8E69507E4',
secret='2qlbFM/NQkJ2zDYcWUcG2xb87/0JosNXqG/OyNDn')
deployApp(account = "yanheupenn", appName = 'MA_plans')
runApp()
